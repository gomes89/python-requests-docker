name: Auto-Update Requests Version

on:
  schedule:
    # Run once a day at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allows manual triggering from the GitHub Actions UI
    inputs:
      logLevel:
        description: 'Log level'
        required: false
        default: 'info'

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate version comparison and commit
          fetch-depth: 0

      - name: Get latest Requests release from psf/requests
        id: get-latest-requests-release
        uses: pozetroninc/github-action-get-latest-release@v0.8.0 # Use a stable version of this action
        with:
          repository: psf/requests
          owner: psf
          excludes: 'prerelease, draft'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read current Requests version from Dockerfile
        id: read-current-requests-version
        run: |
          # Assumes format like 'requests==X.Y.Z'
          CURRENT_REQUESTS_VERSION=$(grep -oP 'requests==\K[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | head -1)
          echo "Current Requests version in Dockerfile: $CURRENT_REQUESTS_VERSION"
          echo "current_requests_version=$CURRENT_REQUESTS_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions and update Dockerfile
        id: update-dockerfile
        run: |
          LATEST_REQUESTS_VERSION=${{ steps.get-latest-requests-release.outputs.release }}
          CURRENT_REQUESTS_VERSION=${{ steps.read-current-requests-version.outputs.current_requests_version }}

          # Remove 'v' prefix from the latest release tag, if present
          LATEST_REQUESTS_VERSION_CLEANED=$(echo "$LATEST_REQUESTS_VERSION" | sed 's/^v//')

          echo "Latest Requests release: $LATEST_REQUESTS_VERSION_CLEANED"

          if [ "$LATEST_REQUESTS_VERSION_CLEANED" = "$CURRENT_REQUESTS_VERSION" ]; then
            echo "Requests version is already up-to-date. No changes needed."
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "Updating Dockerfile from $CURRENT_REQUESTS_VERSION to $LATEST_REQUESTS_VERSION_CLEANED"
            # Use sed to replace the old version with the new one
            # This assumes the line is like: RUN pip install --no-cache-dir requests==X.Y.Z
            sed -i "s/requests==$CURRENT_REQUESTS_VERSION/requests==$LATEST_REQUESTS_VERSION_CLEANED/" Dockerfile
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate GitHub App Token
        id: generate-app-token
        if: steps.update-dockerfile.outputs.updated == 'true' # Only generate if changes are made
        uses: actions/create-github-app-token@v1 # Use a stable version of this action
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Commit and push Dockerfile changes
        if: steps.update-dockerfile.outputs.updated == 'true'
        uses: EndBug/add-and-commit@v9 # Use a stable version of this action
        with:
          message: "Bump requests to ${{ steps.get-latest-requests-release.outputs.release }}"
          add: 'Dockerfile'
          # Use the token generated by the GitHub App
          token: ${{ steps.generate-app-token.outputs.token }}

      - name: Create new GitHub Release
        if: steps.update-dockerfile.outputs.updated == 'true'
        uses: softprops/action-gh-release@v1 # Use a stable version of this action
        with:
          tag_name: ${{ steps.get-latest-requests-release.outputs.release }} # Use the new requests version as the release tag
          name: "${{ steps.get-latest-requests-release.outputs.release }}" # Also use it as name
          body: |
            Automated update for Requests library to ${{ steps.get-latest-requests-release.outputs.release }}.

            ---
            **Upstream Requests Release Notes:**
            ${{ steps.get-latest-requests-release.outputs.description }}
            ---
            [View full release on psf/requests](https://github.com/psf/requests/releases/tag/${{ steps.get-latest-requests-release.outputs.release }})
          draft: false
          prerelease: false
          # Use the token generated by the GitHub App to trigger subsequent workflows
          token: ${{ steps.generate-app-token.outputs.token }}
